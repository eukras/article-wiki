Functions and Extensions

Most customization in =[Article Wiki] will mean adding new function blocks. See
@[function-blocks] or @[standard-plugins] for examples of these, plus
^[/plugins] for an auto-generated list. 

^ /plugins

With one or two exceptions that are implemented inside the wiki, function
blocks are implemented in the `wiki/plugins/` directory. Think of each file
there as a library of functions grouped around some common purpose like
formatting tables.

! File                ! Function                 ! Wiki Syntax
| `/plugins/gloss.py` | `def gloss(\.\.\.):`     | `GLOSS ---`
| `/plugins/table.py` | `def table_csv(\.\.\.):` | `TABLE:CSV (ll$, headers) ---`

To get started, either add a new library by copying and adapting an existing
file, or you add a function to an existing library. Note that you have to
restart the program to make it take note of your changes. 

An extension function needs to do three things:

* Handle the options (given in brackets), if any. 
* Process the body of the text given in the block.
* Return properly escaped HTML, including any required error notices.

A few tips:

* Follow the other plugins to see how options are handled.
* Note that plugins have access to `self.inline()`, `self.typography()`, and `cgi.escape()`. Check what these do, and that all user-derived text that goes into HTML output goes through one of these. They all escape output, and differ only in how much wiki markup they apply.
* If you include any new Python library, remember to add it to `requirements_pip.txt`. 
* If you add any graphics or css, you will need to edit or add new files in `static/` or one of its subdirectories.
* You probably won't need to change the database, but familiarise yourself with Alembic if so.

Indicate any errors by using an `.error` class, like this:

`<p class="error">Error message!</p>`
